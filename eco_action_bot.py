# eco_action_bot.py
import telebot
import json
import requests
from telebot import types
import logging
import random
from datetime import datetime
from config import BOT_TOKEN, WEB_SERVER_URL, ADMIN_USER_ID
from utils import format_action_message
from cachetools import TTLCache

# --- –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –õ–æ–≥–≥–∏—Ä–æ–≤–∞–Ω–∏—è ---
logging.basicConfig(filename='eco_action_bot.log', level=logging.INFO,
                    format='%(asctime)s - %(levelname)s - %(message)s', encoding='utf-8')

# --- –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞ ---
bot = telebot.TeleBot(BOT_TOKEN)

# --- –°–æ—Å—Ç–æ—è–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ---
user_states = {}

# --- –ö–µ—à –¥–ª—è –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –∏ –∞–∫—Ü–∏–π (–≤—Ä–µ–º—è –∂–∏–∑–Ω–∏ - 60 —Å–µ–∫—É–Ω–¥) ---
user_cache = TTLCache(maxsize=128, ttl=60)
actions_cache = TTLCache(maxsize=128, ttl=60)

# --- –§—É–Ω–∫—Ü–∏–∏ –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å API –≤–µ–±-—Å–µ—Ä–≤–µ—Ä–∞ ---

def api_request(method, url, json=None):
    """–û–±—â–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –∑–∞–ø—Ä–æ—Å–æ–≤ –∫ API —Å –∫–µ—à–∏—Ä–æ–≤–∞–Ω–∏–µ–º."""
    try:
        response = requests.request(method, url, json=json)
        response.raise_for_status()
        return response.json()
    except requests.exceptions.RequestException as e:
        logging.error(f"API Error: {e}")
        return None

def get_actions():
    """–ü–æ–ª—É—á–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –∞–∫—Ü–∏–π —Å –≤–µ–±-—Å–µ—Ä–≤–µ—Ä–∞."""
    if 'actions' not in actions_cache:
        actions_cache['actions'] = api_request("GET", f"{WEB_SERVER_URL}/actions")
    return actions_cache['actions']

def register_for_action(user_id, action_id):
    """–†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–∞ –∞–∫—Ü–∏—é."""
    return api_request("POST", f"{WEB_SERVER_URL}/actions/{action_id}/register", json={"user_id": user_id})

def create_action(action_data):
    """–°–æ–∑–¥–∞–µ—Ç –Ω–æ–≤—É—é –∞–∫—Ü–∏—é."""
    actions_cache.clear()  # –°–±—Ä–∞—Å—ã–≤–∞–µ–º –∫–µ—à –∞–∫—Ü–∏–π –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –Ω–æ–≤–æ–π
    return api_request("POST", f"{WEB_SERVER_URL}/actions", json=action_data)

def get_user(user_id):
    """–ü–æ–ª—É—á–∞–µ—Ç –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å –≤–µ–±-—Å–µ—Ä–≤–µ—Ä–∞."""
    if user_id not in user_cache:
        user_cache[user_id] = api_request("GET", f"{WEB_SERVER_URL}/users/{user_id}")
    return user_cache.get(user_id)

def create_user(user_data):
    """–°–æ–∑–¥–∞–µ—Ç –Ω–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è."""
    user_cache.clear() # –°–±—Ä–∞—Å—ã–≤–∞–µ–º –∫–µ—à –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –Ω–æ–≤–æ–≥–æ
    return api_request("POST", f"{WEB_SERVER_URL}/users", json=user_data)

def get_statistics():
    """–ü–æ–ª—É—á–∞–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É —Å –≤–µ–±-—Å–µ—Ä–≤–µ—Ä–∞"""
    return api_request("GET", f"{WEB_SERVER_URL}/statistics")

def check_username_availability(username):
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç, —Å–≤–æ–±–æ–¥–µ–Ω –ª–∏ username."""
    return api_request("GET", f"{WEB_SERVER_URL}/users/check_username/{username}")

def rate_action(action_id, user_id, rating, review):
     return api_request("POST", f"{WEB_SERVER_URL}/actions/{action_id}/rate", json={'user_id': user_id, 'rating': rating, 'review': review})

# --- –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–æ–º–∞–Ω–¥ ---

@bot.message_handler(commands=['start', 'help'])
def send_welcome(message):
    """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –∏ –ø—Ä–µ–¥–ª–∞–≥–∞–µ—Ç –∫–æ–º–∞–Ω–¥—ã."""
    user_id = message.from_user.id
    user = get_user(user_id)
    markup = types.ReplyKeyboardMarkup(resize_keyboard=True, one_time_keyboard=True)
    item1 = types.KeyboardButton("–ü–æ–∫–∞–∑–∞—Ç—å –∞–∫—Ü–∏–∏ üå≥")
    item2 = types.KeyboardButton("–ü—Ä–µ–¥–ª–æ–∂–∏—Ç—å –∞–∫—Ü–∏—é üí°")
    item3 = types.KeyboardButton("–ú–æ–∏ –¥–∞–Ω–Ω—ã–µ üë§")
    item4 = types.KeyboardButton("–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ üìä")
    item5 = types.KeyboardButton("–°–æ–≤–µ—Ç—ã üí°")
    markup.add(item1, item2, item3, item4, item5)

    if user is None:
        bot.send_message(message.chat.id, "üëã –ü—Ä–∏–≤–µ—Ç! –Ø - –≤–∞—à –ø–æ–º–æ—â–Ω–∏–∫ –≤ –º–∏—Ä–µ —ç–∫–æ–ª–æ–≥–∏—á–Ω—ã—Ö –∏–Ω–∏—Ü–∏–∞—Ç–∏–≤.  –î–∞–≤–∞–π—Ç–µ –≤–º–µ—Å—Ç–µ —Å–¥–µ–ª–∞–µ–º –º–∏—Ä –ª—É—á—à–µ!  –î–ª—è –Ω–∞—á–∞–ª–∞, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —Å–≤–æ–µ –∏–º—è:")
        user_states[user_id] = {"state": "waiting_for_name", "data": {}}
    else:
        bot.reply_to(message,
                     f"üòä –ü—Ä–∏–≤–µ—Ç, {user.get('name', '–¥—Ä—É–≥')}! –Ø –±–æ—Ç, –∫–æ—Ç–æ—Ä—ã–π –ø–æ–º–æ–∂–µ—Ç —Ç–µ–±–µ –∑–∞–±–æ—Ç–∏—Ç—å—Å—è –æ–± –æ–∫—Ä—É–∂–∞—é—â–µ–π —Å—Ä–µ–¥–µ.\n\n"
                     "–í–æ—Ç —á—Ç–æ —è —É–º–µ—é:\n"
                     "/start - –ü–æ–∫–∞–∑–∞—Ç—å —ç—Ç–æ –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ\n"
                     "/actions - –ü–æ–∫–∞–∑–∞—Ç—å —Å–ø–∏—Å–æ–∫ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∞–∫—Ü–∏–π üå≥\n"
                     "/propose - –ü—Ä–µ–¥–ª–æ–∂–∏—Ç—å –Ω–æ–≤—É—é –∞–∫—Ü–∏—é üí°\n"
                     "/mydetails - –ü—Ä–æ—Å–º–æ—Ç—Ä –ª–∏—á–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö üë§\n"
                     "/statistics - –ü–æ–ª—É—á–∏—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É üìä\n"
                     "/tips - –ü–æ–ª—É—á–∏—Ç—å —Å–æ–≤–µ—Ç—ã üí°", reply_markup=markup)

@bot.message_handler(func=lambda message: message.text == "–ü–æ–∫–∞–∑–∞—Ç—å –∞–∫—Ü–∏–∏ üå≥" or message.text == "/actions")
def list_actions(message):
    """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Å–ø–∏—Å–æ–∫ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∞–∫—Ü–∏–π."""
    user_id = message.from_user.id
    user = get_user(user_id)

    if not user:
        bot.reply_to(message, "ü§î –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –≤–∞—à–∏ –¥–∞–Ω–Ω—ã–µ. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ /start –µ—â–µ —Ä–∞–∑.")
        return

    user_city = user.get('city')
    if not user_city:
        bot.reply_to(message, "–ì–æ—Ä–æ–¥ –Ω–µ —É–∫–∞–∑–∞–Ω. –£–∫–∞–∂–∏—Ç–µ —Å–≤–æ–π –≥–æ—Ä–æ–¥, –∏—Å–ø–æ–ª—å–∑—É—è –∫–æ–º–∞–Ω–¥—É /start.")
        return

    actions = get_actions()
    if actions:
        today = datetime.now().date()
        relevant_actions = []
        for action in actions:
            action_date = valid_date(action.get('date'))
            if action.get('location') == user_city and action_date and action_date >= today:
                relevant_actions.append(action)
        if relevant_actions:
            for action in relevant_actions:
                action_message = format_action_message(action)
                bot.send_message(message.chat.id, action_message, parse_mode="Markdown")
        else:
            bot.reply_to(message, "üå± –í –≤–∞—à–µ–º –≥–æ—Ä–æ–¥–µ –ø–æ–∫–∞ –Ω–µ—Ç –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –∞–∫—Ü–∏–π.")
    else:
        bot.reply_to(message, "üòî –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ –∞–∫—Ü–∏–π. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")

def valid_date(date_string):
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –∏ –ø—Ä–µ–æ–±—Ä–∞–∑—É–µ—Ç –¥–∞—Ç—É –∏–∑ —Å—Ç—Ä–æ–∫–∏ –≤ –æ–±—ä–µ–∫—Ç date."""
    try:
        return datetime.strptime(date_string, '%Y-%m-%d').date()
    except (ValueError, TypeError):
        return None

@bot.message_handler(func=lambda message: message.text == "–ú–æ–∏ –¥–∞–Ω–Ω—ã–µ üë§" or message.text == "/mydetails")
def my_details(message):
    """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è."""
    user_id = message.from_user.id
    user = get_user(user_id)

    if user:
        user_details = (
            f"üë§ *–ò–º—è:* {user.get('name', '–ù–µ —É–∫–∞–∑–∞–Ω–æ')}\n"
            f"üèòÔ∏è *–ì–æ—Ä–æ–¥:* {user.get('city', '–ù–µ —É–∫–∞–∑–∞–Ω–æ')}\n"
            f"üè´ *–ö–ª–∞—Å—Å:* {user.get('grade', '–ù–µ —É–∫–∞–∑–∞–Ω–æ')}\n"
            f"‚úâÔ∏è *Username:* {user.get('username', '–ù–µ —É–∫–∞–∑–∞–Ω–æ')}"
        )
        bot.send_message(message.chat.id, user_details, parse_mode="Markdown")
    else:
        bot.reply_to(message, "üòî –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ /start –µ—â–µ —Ä–∞–∑.")

@bot.message_handler(func=lambda message: message.text == "–ü—Ä–µ–¥–ª–æ–∂–∏—Ç—å –∞–∫—Ü–∏—é üí°" or message.text == "/propose")
def propose_action(message):
    user_id = message.from_user.id
    user_states[user_id] = {"state": "waiting_for_action_title", "data": {}}
    bot.send_message(message.chat.id, "‚úçÔ∏è –í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –∞–∫—Ü–∏–∏:")

@bot.message_handler(func=lambda message: user_states.get(message.from_user.id, {}).get("state") == "waiting_for_action_title", content_types=['text'])
def process_action_title(message):
    user_id = message.from_user.id
    title = message.text
    if not title.strip():
        bot.send_message(message.chat.id, "–ù–∞–∑–≤–∞–Ω–∏–µ –∞–∫—Ü–∏–∏ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º. –í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ:")
        return

    user_states[user_id]["data"]["title"] = title
    bot.send_message(message.chat.id, "üóìÔ∏è –í–≤–µ–¥–∏—Ç–µ –¥–∞—Ç—É –ø—Ä–æ–≤–µ–¥–µ–Ω–∏—è –∞–∫—Ü–∏–∏ –≤ —Ñ–æ—Ä–º–∞—Ç–µ YYYY-MM-DD:")
    user_states[user_id]["state"] = "waiting_for_action_date"

@bot.message_handler(func=lambda message: user_states.get(message.from_user.id, {}).get("state") == "waiting_for_action_date", content_types=['text'])
def process_action_date(message):
    user_id = message.from_user.id
    date_str = message.text
    try:
        datetime.strptime(date_str, '%Y-%m-%d')
    except ValueError:
        bot.send_message(message.chat.id, "–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞—Ç—ã. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ YYYY-MM-DD.")
        return

    user_states[user_id]["data"]["date"] = date_str
    bot.send_message(message.chat.id, "üìç –í–≤–µ–¥–∏—Ç–µ –º–µ—Å—Ç–æ –ø—Ä–æ–≤–µ–¥–µ–Ω–∏—è –∞–∫—Ü–∏–∏:")
    user_states[user_id]["state"] = "waiting_for_action_location"

@bot.message_handler(func=lambda message: user_states.get(message.from_user.id, {}).get("state") == "waiting_for_action_location", content_types=['text'])
def process_action_location(message):
    user_id = message.from_user.id
    location = message.text
    if not location.strip():
        bot.send_message(message.chat.id, "–ú–µ—Å—Ç–æ –ø—Ä–æ–≤–µ–¥–µ–Ω–∏—è –∞–∫—Ü–∏–∏ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º. –í–≤–µ–¥–∏—Ç–µ –º–µ—Å—Ç–æ:")
        return

    user_states[user_id]["data"]["location"] = location
    bot.send_message(message.chat.id, "üå± –í–≤–µ–¥–∏—Ç–µ –æ–ø–∏—Å–∞–Ω–∏–µ –∞–∫—Ü–∏–∏:")
    user_states[user_id]["state"] = "waiting_for_action_description"

@bot.message_handler(func=lambda message: user_states.get(message.from_user.id, {}).get("state") == "waiting_for_action_description", content_types=['text'])
def process_action_description(message):
    user_id = message.from_user.id
    description = message.text
    if not description.strip():
        bot.send_message(message.chat.id, "–û–ø–∏—Å–∞–Ω–∏–µ –∞–∫—Ü–∏–∏ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º. –í–≤–µ–¥–∏—Ç–µ –æ–ø–∏—Å–∞–Ω–∏–µ:")
        return

    user_states[user_id]["data"]["description"] = description
    action_data = user_states[user_id]["data"]
    action_data["proposer_id"] = user_id

    created_action = create_action(action_data)

    if created_action:
        bot.send_message(message.chat.id, "‚úÖ –û—Ç–ª–∏—á–Ω–æ! –í–∞—à–∞ –∞–∫—Ü–∏—è —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω–∞. –û–Ω–∞ –±—É–¥–µ—Ç —Ä–∞—Å—Å–º–æ—Ç—Ä–µ–Ω–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º.")
        # –ü–æ—Å–ª–µ —É—Å–ø–µ—à–Ω–æ–≥–æ —Å–æ–∑–¥–∞–Ω–∏—è –∞–∫—Ü–∏–∏ –ø—Ä–µ–¥–ª–∞–≥–∞–µ–º –º–µ–Ω—é
        markup = types.ReplyKeyboardMarkup(resize_keyboard=True, one_time_keyboard=True)
        item1 = types.KeyboardButton("–ü–æ–∫–∞–∑–∞—Ç—å –∞–∫—Ü–∏–∏ üå≥")
        item2 = types.KeyboardButton("–ü—Ä–µ–¥–ª–æ–∂–∏—Ç—å –∞–∫—Ü–∏—é üí°")
        item3 = types.KeyboardButton("–ú–æ–∏ –¥–∞–Ω–Ω—ã–µ üë§")
        item4 = types.KeyboardButton("–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ üìä")
        item5 = types.KeyboardButton("–°–æ–≤–µ—Ç—ã üí°")
        markup.add(item1, item2, item3, item4, item5)
        bot.send_message(message.chat.id, "–ß—Ç–æ –¥–∞–ª—å—à–µ? üòâ", reply_markup=markup)

    else:
        bot.send_message(message.chat.id, "üòî –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
    user_states.pop(user_id, None)

@bot.callback_query_handler(func=lambda call: call.data.startswith("register_"))
def register_callback(call):
    action_id = call.data.split("_")[1]
    user_id = call.from_user.id
    result = register_for_action(user_id, action_id)
    if result:
        bot.answer_callback_query(call.id, text="‚úÖ –í—ã —É—Å–ø–µ—à–Ω–æ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã!")
    else:
        bot.answer_callback_query(call.id, text="üòî –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è –Ω–∞ –∞–∫—Ü–∏—é. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")

@bot.message_handler(func=lambda message: user_states.get(message.from_user.id, {}).get("state") == "waiting_for_name", content_types=['text'])
def set_name(message):
    """–£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç –∏–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è."""
    user_id = message.from_user.id
    name = message.text.strip()  # Remove leading/trailing spaces

    if not name:
        bot.send_message(message.chat.id, "–ò–º—è –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º. –í–≤–µ–¥–∏—Ç–µ –∏–º—è:")
        return

    user_states[user_id]["data"]["name"] = name
    bot.send_message(message.chat.id, "üèòÔ∏è –£–∫–∞–∂–∏—Ç–µ –≤–∞—à –≥–æ—Ä–æ–¥:")
    user_states[user_id]["state"] = "waiting_for_city"

@bot.message_handler(func=lambda message: user_states.get(message.from_user.id, {}).get("state") == "waiting_for_city", content_types=['text'])
def set_city(message):
    """–£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç –≥–æ—Ä–æ–¥ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è."""
    user_id = message.from_user.id
    city = message.text.strip() # Remove leading/trailing spaces

    if not city:
        bot.send_message(message.chat.id, "–ì–æ—Ä–æ–¥ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º. –í–≤–µ–¥–∏—Ç–µ –≥–æ—Ä–æ–¥:")
        return

    user_states[user_id]["data"]["city"] = city
    bot.send_message(message.chat.id, "üè´ –£–∫–∞–∂–∏—Ç–µ –≤–∞—à –∫–ª–∞—Å—Å (–Ω–∞–ø—Ä–∏–º–µ—Ä, 10–ê):")
    user_states[user_id]["state"] = "waiting_for_grade"

@bot.message_handler(func=lambda message: user_states.get(message.from_user.id, {}).get("state") == "waiting_for_grade", content_types=['text'])
def set_grade(message):
    """–£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç –∫–ª–∞—Å—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è."""
    user_id = message.from_user.id
    grade = message.text.strip()  # Remove leading/trailing spaces

    if not grade:
        bot.send_message(message.chat.id, "–ö–ª–∞—Å—Å –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º. –í–≤–µ–¥–∏—Ç–µ –∫–ª–∞—Å—Å:")
        return

    user_states[user_id]["data"]["grade"] = grade
    bot.send_message(message.chat.id, "‚úçÔ∏è –ü—Ä–∏–¥—É–º–∞–π—Ç–µ —Å–≤–æ–π username:")
    user_states[user_id]["state"] = "waiting_for_username"

@bot.message_handler(func=lambda message: user_states.get(message.from_user.id, {}).get("state") == "waiting_for_username", content_types=['text'])
def set_username(message):
    """–£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç –∏–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è."""
    user_id = message.from_user.id
    username = message.text.strip()  # Remove leading/trailing spaces
    if not username:
        bot.send_message(message.chat.id, "Username –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º. –í–≤–µ–¥–∏—Ç–µ username:")
        return

    # Check username availability (using the API)
    username_check = check_username_availability(username)
    if username_check is None:
        bot.send_message(message.chat.id, "üòî –ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–æ–≤–µ—Ä–∏—Ç—å username. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
        return

    if not username_check.get('available', False):
        bot.send_message(message.chat.id, "–≠—Ç–æ—Ç username —É–∂–µ –∑–∞–Ω—è—Ç. –ü—Ä–∏–¥—É–º–∞–π—Ç–µ –¥—Ä—É–≥–æ–π:")
        return

    user_states[user_id]["data"]["username"] = username

    # Create the user in the database/JSON file
    user_data = user_states[user_id]["data"]
    user_data["user_id"] = user_id
    create_user(user_data)

    # Clear user state
    user_states.pop(user_id, None)

    # Respond to the user and offer the menu
    markup = types.ReplyKeyboardMarkup(resize_keyboard=True, row_width=2)
    item1 = types.KeyboardButton("–ü–æ–∫–∞–∑–∞—Ç—å –∞–∫—Ü–∏–∏ üå≥")
    item2 = types.KeyboardButton("–ü—Ä–µ–¥–ª–æ–∂–∏—Ç—å –∞–∫—Ü–∏—é üí°")
    item3 = types.KeyboardButton("–ú–æ–∏ –¥–∞–Ω–Ω—ã–µ üë§")
    item4 = types.KeyboardButton("–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ üìä")
    item5 = types.KeyboardButton("–°–æ–≤–µ—Ç—ã üí°")

    markup.add(item1, item2, item3, item4, item5)
    bot.send_message(message.chat.id, "üéâ –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –ø—Ä–æ—à–ª–∞ —É—Å–ø–µ—à–Ω–æ! –ß—Ç–æ –±—É–¥–µ–º –¥–µ–ª–∞—Ç—å –¥–∞–ª—å—à–µ?", reply_markup=markup)

@bot.message_handler(commands=['statistics'])
def show_statistics(message):
    """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É —Å –≤–µ–±-—Å–µ—Ä–≤–µ—Ä–∞."""
    user_id = message.from_user.id
    user = get_user(user_id)

    if not user:
        bot.reply_to(message, "üòî –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –≤–∞—à–∏ –¥–∞–Ω–Ω—ã–µ. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ /start –µ—â–µ —Ä–∞–∑.")
        return

    # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –∞–∫—Ü–∏–∏
    actions = get_actions()
    if actions is None:
        bot.reply_to(message, "üòî –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –æ–± –∞–∫—Ü–∏—è—Ö. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
        return

    # –°—á–∏—Ç–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∞–∫—Ü–∏–π, –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º
    user_actions_count = sum(1 for action in actions if action.get('proposer_id') == user_id)

    # –°—á–∏—Ç–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∞–∫—Ü–∏–π –≤ –≥–æ—Ä–æ–¥–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    city = user.get('city')
    city_actions_count = sum(1 for action in actions if action.get('location') == city) if city else 0

    # –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ä–∞—Å—Å–º–æ—Ç—Ä–µ–Ω–Ω—ã—Ö –∞–∫—Ü–∏–π (–∫–æ–Ω—Å—Ç–∞–Ω—Ç–∞)
    considered_actions = 0

    # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
    msg = (
        f"üìä *–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞*\n\n"
        f"üå± *–í–∞—à–∏ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è:* {user_actions_count}\n"
        f"üèòÔ∏è *–ü—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è –≤ –≤–∞—à–µ–º –≥–æ—Ä–æ–¥–µ:* {city_actions_count}\n"
        f"‚úÖ *–†–∞—Å—Å–º–æ—Ç—Ä–µ–Ω–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º:* {considered_actions}"
    )
    bot.send_message(message.chat.id, msg, parse_mode="Markdown")

@bot.message_handler(commands=['tips'])
def send_eco_tips(message):
    """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Å–æ–≤–µ—Ç—ã –ø–æ —ç–∫–æ–ª–æ–≥–∏—á–Ω–æ–º—É –æ–±—Ä–∞–∑—É –∂–∏–∑–Ω–∏."""
    tips = [
        "‚ôªÔ∏è –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –º–Ω–æ–≥–æ—Ä–∞–∑–æ–≤—ã–µ —Å—É–º–∫–∏ –≤–º–µ—Å—Ç–æ –ø–ª–∞—Å—Ç–∏–∫–æ–≤—ã—Ö.",
        "üóëÔ∏è –°–æ—Ä—Ç–∏—Ä—É–π—Ç–µ –º—É—Å–æ—Ä –∏ —Å–¥–∞–≤–∞–π—Ç–µ –µ–≥–æ –Ω–∞ –ø–µ—Ä–µ—Ä–∞–±–æ—Ç–∫—É.",
        "üíß –≠–∫–æ–Ω–æ–º—å—Ç–µ –≤–æ–¥—É –∏ —ç–ª–µ–∫—Ç—Ä–æ—ç–Ω–µ—Ä–≥–∏—é.",
        "üö≤ –ü—Ä–µ–¥–ø–æ—á–∏—Ç–∞–π—Ç–µ –æ–±—â–µ—Å—Ç–≤–µ–Ω–Ω—ã–π —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç –∏–ª–∏ –≤–µ–ª–æ—Å–∏–ø–µ–¥.",
        "üçé –ü–æ–∫—É–ø–∞–π—Ç–µ –ø—Ä–æ–¥—É–∫—Ç—ã –º–µ—Å—Ç–Ω–æ–≥–æ –ø—Ä–æ–∏–∑–≤–æ–¥—Å—Ç–≤–∞.",
        "üçΩÔ∏è –û—Ç–∫–∞–∂–∏—Ç–µ—Å—å –æ—Ç –æ–¥–Ω–æ—Ä–∞–∑–æ–≤–æ–π –ø–æ—Å—É–¥—ã –∏ —É–ø–∞–∫–æ–≤–∫–∏.",
        "üì¶ –ü–æ–∫—É–ø–∞–π—Ç–µ —Ç–æ–≤–∞—Ä—ã —Å –º–∏–Ω–∏–º–∞–ª—å–Ω–æ–π —É–ø–∞–∫–æ–≤–∫–æ–π.",
        "üõ†Ô∏è –†–µ–º–æ–Ω—Ç–∏—Ä—É–π—Ç–µ –≤–µ—â–∏ –≤–º–µ—Å—Ç–æ —Ç–æ–≥–æ, —á—Ç–æ–±—ã –≤—ã–±—Ä–∞—Å—ã–≤–∞—Ç—å –∏—Ö.",
        "ü§ù –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–π—Ç–µ —ç–∫–æ–ª–æ–≥–∏—á–µ—Å–∫–∏ –æ—Ç–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω—ã–µ –∫–æ–º–ø–∞–Ω–∏–∏.",
        "üéâ –£—á–∞—Å—Ç–≤—É–π—Ç–µ –≤ —ç–∫–æ–ª–æ–≥–∏—á–µ—Å–∫–∏—Ö –∞–∫—Ü–∏—è—Ö –∏ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è—Ö.",
        "üí° –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —ç–Ω–µ—Ä–≥–æ—Å–±–µ—Ä–µ–≥–∞—é—â–∏–µ –ª–∞–º–ø—ã.",
        "üå± –°–æ–±–∏—Ä–∞–π—Ç–µ –¥–æ–∂–¥–µ–≤—É—é –≤–æ–¥—É –¥–ª—è –ø–æ–ª–∏–≤–∞ —Ä–∞—Å—Ç–µ–Ω–∏–π.",
        "üçÇ –ö–æ–º–ø–æ—Å—Ç–∏—Ä—É–π—Ç–µ –æ—Ä–≥–∞–Ω–∏—á–µ—Å–∫–∏–µ –æ—Ç—Ö–æ–¥—ã.",
        "üö´ –ò–∑–±–µ–≥–∞–π—Ç–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è —Ö–∏–º–∏—á–µ—Å–∫–∏—Ö –≤–µ—â–µ—Å—Ç–≤ –≤ —Å–∞–¥—É –∏ –æ–≥–æ—Ä–æ–¥–µ.",
    ]
    bot.send_message(message.chat.id, random.choice(tips))

@bot.message_handler(func=lambda message: True, content_types=['text'])
def handle_text(message):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç —Ç–µ–∫—Å—Ç–æ–≤—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è, –µ—Å–ª–∏ –æ–Ω–∏ –Ω–µ –∫–æ–º–∞–Ω–¥—ã."""
    if message.text == "–ü—Ä–∏–≤–µ—Ç":
        bot.send_message(message.chat.id, "–ü—Ä–∏–≤–µ—Ç!")
    elif message.text == "–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ üìä":
        show_statistics(message)
    elif message.text == "–°–æ–≤–µ—Ç—ã üí°":
        send_eco_tips(message)
    elif message.text == "–ü–æ–∫–∞–∑–∞—Ç—å –∞–∫—Ü–∏–∏ üå≥":
        list_actions(message)
    elif message.text == "–ü—Ä–µ–¥–ª–æ–∂–∏—Ç—å –∞–∫—Ü–∏—é üí°":
        propose_action(message)
    elif message.text == "–ú–æ–∏ –¥–∞–Ω–Ω—ã–µ üë§":
        my_details(message)
    else:
        send_welcome(message)

# --- –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞ ---
if __name__ == '__main__':
    try:
        bot.polling(none_stop=True)
    except Exception as e:
        logging.critical(f"–ë–æ—Ç —É–ø–∞–ª! {e}")